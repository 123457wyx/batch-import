--- /Users/mh/java/neo/batchperformance/src/main/java/org/neo4j/unsafe/batchinsert/BatchInserterImpl.java	2012-10-03 04:16:55.000000000 +0200
+++ ./kernel/src/main/java/org/neo4j/unsafe/batchinsert/BatchInserterImpl.java	2012-10-22 03:36:34.000000000 +0200
@@ -20,7 +20,12 @@
 package org.neo4j.unsafe.batchinsert;
 
 import java.io.File;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 import java.util.Map.Entry;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.graphdb.NotFoundException;
@@ -36,7 +41,29 @@
 import org.neo4j.kernel.configuration.ConfigurationDefaults;
 import org.neo4j.kernel.impl.batchinsert.SimpleRelationship;
 import org.neo4j.kernel.impl.index.IndexStore;
-import org.neo4j.kernel.impl.nioneo.store.*;
+import org.neo4j.kernel.impl.nioneo.store.DynamicRecord;
+import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;
+import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;
+import org.neo4j.kernel.impl.nioneo.store.InvalidRecordException;
+import org.neo4j.kernel.impl.nioneo.store.NameData;
+import org.neo4j.kernel.impl.nioneo.store.NeoStore;
+import org.neo4j.kernel.impl.nioneo.store.NodeRecord;
+import org.neo4j.kernel.impl.nioneo.store.NodeStore;
+import org.neo4j.kernel.impl.nioneo.store.PrimitiveRecord;
+import org.neo4j.kernel.impl.nioneo.store.PropertyBlock;
+import org.neo4j.kernel.impl.nioneo.store.PropertyData;
+import org.neo4j.kernel.impl.nioneo.store.PropertyIndexRecord;
+import org.neo4j.kernel.impl.nioneo.store.PropertyIndexStore;
+import org.neo4j.kernel.impl.nioneo.store.PropertyRecord;
+import org.neo4j.kernel.impl.nioneo.store.PropertyStore;
+import org.neo4j.kernel.impl.nioneo.store.PropertyType;
+import org.neo4j.kernel.impl.nioneo.store.Record;
+import org.neo4j.kernel.impl.nioneo.store.RelationshipRecord;
+import org.neo4j.kernel.impl.nioneo.store.RelationshipStore;
+import org.neo4j.kernel.impl.nioneo.store.RelationshipTypeRecord;
+import org.neo4j.kernel.impl.nioneo.store.RelationshipTypeStore;
+import org.neo4j.kernel.impl.nioneo.store.StoreFactory;
+import org.neo4j.kernel.impl.nioneo.store.UnderlyingStorageException;
 import org.neo4j.kernel.impl.util.FileUtils;
 import org.neo4j.kernel.impl.util.StringLogger;
 
@@ -76,7 +103,7 @@
 
         params = new ConfigurationDefaults( GraphDatabaseSettings.class ).apply( params );
         Config config = new Config( params );
-        boolean dump = config.get(GraphDatabaseSettings.dump_configuration);
+        boolean dump = config.get( GraphDatabaseSettings.dump_configuration );
         this.storeDir = storeDir;
         this.idGeneratorFactory = new DefaultIdGeneratorFactory();
 
@@ -177,7 +204,7 @@
         PropertyRecord current = null;
         PropertyBlock target = null;
         long nextProp = primitive.getNextProp();
-        int propIndex = getPropertyKeyId(property);
+        int propIndex = indexHolder.getKeyId(property);
         if ( nextProp == Record.NO_NEXT_PROPERTY.intValue() || propIndex == -1 )
         {
             // No properties or no one has that property, nothing changed
@@ -265,7 +292,7 @@
     {
         boolean result = false;
         long nextProp = primitive.getNextProp();
-        int index = getPropertyKeyId(name);
+        int index = indexHolder.getKeyId( name );
 
         if ( index == -1 )
         {
@@ -352,7 +379,7 @@
             String propertyName )
     {
         long nextProp = record.getNextProp();
-        int propertyIndex = getPropertyKeyId(propertyName);
+        int propertyIndex = indexHolder.getKeyId( propertyName );
         if (nextProp == Record.NO_NEXT_PROPERTY.intValue() || propertyIndex == -1)
         {
             return false;
@@ -711,7 +738,7 @@
         propRecords.add( currentRecord );
         for ( Entry<String,Object> entry : properties.entrySet() )
         {
-            int keyId = getPropertyKeyId(entry.getKey());
+            int keyId = indexHolder.getKeyId( entry.getKey() );
             if ( keyId == -1 )
             {
                 keyId = createNewPropertyIndex( entry.getKey() );
@@ -848,7 +875,7 @@
         return neoStore.getNodeStore();
     }
 
-    public PropertyStore getPropertyStore()
+    private PropertyStore getPropertyStore()
     {
         return neoStore.getPropertyStore();
     }
@@ -953,31 +980,5 @@
             }
         }
     }
-    public NeoStore getNeoStore() {
-        return neoStore;
-    }
-    public int createAllPropertyIndexes(Collection<String> names) {
-        int max=0;
-        for (String name : names) {
-            if (getPropertyKeyId(name) != -1) continue;
-            max = createNewPropertyIndex( name );
-        }
-        return max;
-    }
-
-    public int createAllRelTypeIndexes(Collection<String> types) {
-        int max=0;
-        for (String type : types) {
-            if (getRelTypeId(type) != -1) continue;
-            max = createNewRelationshipType(type);
-        }
-        return max;
-    }
 
-    public int getPropertyKeyId(String name) {
-        return indexHolder.getKeyId(name);
-    }
-    public int getRelTypeId(String name) {
-        return typeHolder.getTypeId(name);
-    }
 }
